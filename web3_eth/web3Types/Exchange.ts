/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Cancel = ContractEventLog<{
  id: string;
  user: string;
  tokenGet: string;
  amountGet: string;
  tokenGive: string;
  amountGive: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type Deposit = ContractEventLog<{
  token: string;
  user: string;
  amount: string;
  balance: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Order = ContractEventLog<{
  id: string;
  user: string;
  tokenGet: string;
  amountGet: string;
  tokenGive: string;
  amountGive: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type Trade = ContractEventLog<{
  id: string;
  user: string;
  tokenGet: string;
  amountGet: string;
  tokenGive: string;
  amountGive: string;
  userFill: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type Withdraw = ContractEventLog<{
  token: string;
  user: string;
  amount: string;
  balance: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface Exchange extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Exchange;
  clone(): Exchange;
  methods: {
    feeAccount(): NonPayableTransactionObject<string>;

    feePercent(): NonPayableTransactionObject<string>;

    orderCancelled(
      arg0: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    orderCount(): NonPayableTransactionObject<string>;

    orderFilled(
      arg0: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    orders(arg0: number | string | BN): NonPayableTransactionObject<{
      id: string;
      user: string;
      tokenGet: string;
      amountGet: string;
      tokenGive: string;
      amountGive: string;
      timestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    tokens(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    depositEther(): PayableTransactionObject<void>;

    withdrawEther(
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    depositToken(
      _token: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawToken(
      _token: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    balanceOf(
      _token: string,
      _user: string
    ): NonPayableTransactionObject<string>;

    makeOrder(
      _tokenGet: string,
      _amountGet: number | string | BN,
      _tokenGive: string,
      _amountGive: number | string | BN
    ): NonPayableTransactionObject<void>;

    cancelOrder(_id: number | string | BN): NonPayableTransactionObject<void>;

    fillOrder(_id: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    Cancel(cb?: Callback<Cancel>): EventEmitter;
    Cancel(options?: EventOptions, cb?: Callback<Cancel>): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Order(cb?: Callback<Order>): EventEmitter;
    Order(options?: EventOptions, cb?: Callback<Order>): EventEmitter;

    Trade(cb?: Callback<Trade>): EventEmitter;
    Trade(options?: EventOptions, cb?: Callback<Trade>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Cancel", cb: Callback<Cancel>): void;
  once(event: "Cancel", options: EventOptions, cb: Callback<Cancel>): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Order", cb: Callback<Order>): void;
  once(event: "Order", options: EventOptions, cb: Callback<Order>): void;

  once(event: "Trade", cb: Callback<Trade>): void;
  once(event: "Trade", options: EventOptions, cb: Callback<Trade>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
